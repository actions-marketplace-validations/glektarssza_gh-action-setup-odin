"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseVersion = exports.getLatestRelease = exports.findRelease = exports.downloadOdinRelease = exports.getTestingModule = exports.ODIN_STREAMS = void 0;
const utils_1 = require("./utils");
exports.ODIN_STREAMS = ['dev'];
const MONTH_REGEX = /^(0[1-9]|1[1-2])$/;
const YEAR_REGEX = /^\d{4}$/;
const m = {
    parseVersion(str) {
        const split = str.split('-');
        if (split.length !== 3) {
            throw new Error('Cannot parse Odin version (wrong number of parts)');
        }
        const [stream, year, month] = split;
        if (!exports.ODIN_STREAMS.includes(stream)) {
            throw new Error(`Cannot parse Odin version (unknown stream "${stream}")`);
        }
        if (!YEAR_REGEX.test(year)) {
            throw new Error(`Cannot parse Odin version (invalid year "${year}")`);
        }
        if (!MONTH_REGEX.test(month)) {
            throw new Error(`Cannot parse Odin version (invalid month "${month}")`);
        }
        return [stream, year, month];
    },
    async getLatestRelease(octokit) {
        const release = await (0, utils_1.getRepositoryLatestRelease)({
            owner: 'odin-lang',
            repo: 'odin'
        }, octokit);
        return m.parseVersion(release.tag_name);
    },
    async findRelease(version, octokit) {
        return await (0, utils_1.getRepositoryReleaseByTag)({
            owner: 'odin-lang',
            repo: 'odin',
            tag: version.join('-')
        }, octokit);
    },
    async downloadOdinRelease(version, destinationFolder, octokit) {
        let dlVersion = version;
        if (dlVersion === 'latest') {
            dlVersion = await m.getLatestRelease(octokit);
        }
        return (0, utils_1.downloadRepositoryReleaseAsset)({
            owner: 'odin-lang',
            repo: 'odin',
            asset_id: (await m.findRelease(dlVersion, octokit)).id
        }, destinationFolder, octokit);
    }
};
function getTestingModule() {
    return m;
}
exports.getTestingModule = getTestingModule;
exports.downloadOdinRelease = m.downloadOdinRelease, exports.findRelease = m.findRelease, exports.getLatestRelease = m.getLatestRelease, exports.parseVersion = m.parseVersion;
//# sourceMappingURL=data:application/json;base64,