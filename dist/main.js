"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
const core_1 = __importDefault(require("@actions/core"));
const compressing_1 = __importDefault(require("compressing"));
const odin_repo_1 = require("./odin-repo");
const utils_1 = require("./utils");
async function main() {
    const octokit = (0, utils_1.createOctokit)();
    const version = core_1.default.getInput('odin-version', { required: true });
    let destinationPath = core_1.default.getInput('destination', { required: false });
    const addToPath = core_1.default.getBooleanInput('add-to-path', { required: false });
    if (!destinationPath) {
        destinationPath = node_path_1.default.resolve(process.env['GITHUB_WORKSPACE'], './.odin');
    }
    let odinVersion;
    if (version !== 'latest') {
        odinVersion = (0, odin_repo_1.parseVersion)(version);
    }
    else {
        odinVersion = await (0, odin_repo_1.getLatestRelease)(octokit);
    }
    const archivePath = await (0, odin_repo_1.downloadOdinRelease)(odinVersion, destinationPath, octokit);
    const archiveFile = await promises_1.default.open(archivePath, promises_1.default.constants.O_RDONLY);
    try {
        const rs = archiveFile.createReadStream();
        await compressing_1.default.zip.uncompress(rs, destinationPath);
    }
    finally {
        await archiveFile.close();
    }
    core_1.default.setOutput('odin-version', odinVersion.join('-'));
    core_1.default.setOutput('odin-path', destinationPath);
    core_1.default.setOutput('odin-binary-path', node_path_1.default.resolve(destinationPath, `./odin${process.platform === 'win32' ? '.exe' : ''}`));
    if (addToPath) {
        core_1.default.addPath(destinationPath);
    }
    core_1.default.saveState('odin-path', destinationPath);
}
main().catch((err) => {
    core_1.default.setFailed(err.message);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsZ0VBQWtDO0FBQ2xDLDBEQUE2QjtBQUc3Qix5REFBaUM7QUFDakMsOERBQXNDO0FBR3RDLDJDQUtxQjtBQUNyQixtQ0FBc0M7QUFFdEMsS0FBSyxVQUFVLElBQUk7SUFDZixNQUFNLE9BQU8sR0FBRyxJQUFBLHFCQUFhLEdBQUUsQ0FBQztJQUNoQyxNQUFNLE9BQU8sR0FBRyxjQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBQ2hFLElBQUksZUFBZSxHQUFHLGNBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7SUFDdEUsTUFBTSxTQUFTLEdBQUcsY0FBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsRUFBQyxRQUFRLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztJQUN6RSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDbkIsZUFBZSxHQUFHLG1CQUFJLENBQUMsT0FBTyxDQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFFLEVBQ2hDLFNBQVMsQ0FDWixDQUFDO0lBQ04sQ0FBQztJQUNELElBQUksV0FBd0IsQ0FBQztJQUM3QixJQUFJLE9BQU8sS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUN2QixXQUFXLEdBQUcsSUFBQSx3QkFBWSxFQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLENBQUM7U0FBTSxDQUFDO1FBQ0osV0FBVyxHQUFHLE1BQU0sSUFBQSw0QkFBZ0IsRUFBQyxPQUFPLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBQ0QsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFBLCtCQUFtQixFQUN6QyxXQUFXLEVBQ1gsZUFBZSxFQUNmLE9BQU8sQ0FDVixDQUFDO0lBQ0YsTUFBTSxXQUFXLEdBQUcsTUFBTSxrQkFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsa0JBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEUsSUFBSSxDQUFDO1FBQ0QsTUFBTSxFQUFFLEdBQUcsV0FBVyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDMUMsTUFBTSxxQkFBVyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzFELENBQUM7WUFBUyxDQUFDO1FBQ1AsTUFBTSxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUNELGNBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN0RCxjQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUM3QyxjQUFJLENBQUMsU0FBUyxDQUNWLGtCQUFrQixFQUNsQixtQkFBSSxDQUFDLE9BQU8sQ0FDUixlQUFlLEVBQ2YsU0FBUyxPQUFPLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDeEQsQ0FDSixDQUFDO0lBQ0YsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUNaLGNBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNELGNBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ2pELENBQUM7QUFFRCxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFVLEVBQUUsRUFBRTtJQUN4QixjQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoQyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vLS0gTm9kZUpTXG5pbXBvcnQgZnMgZnJvbSAnbm9kZTpmcy9wcm9taXNlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdub2RlOnBhdGgnO1xuXG4vLy0tIE5QTSBQYWNrYWdlc1xuaW1wb3J0IGNvcmUgZnJvbSAnQGFjdGlvbnMvY29yZSc7XG5pbXBvcnQgY29tcHJlc3NpbmcgZnJvbSAnY29tcHJlc3NpbmcnO1xuXG4vLy0tIFByb2plY3QgQ29kZVxuaW1wb3J0IHtcbiAgICBPZGluVmVyc2lvbixcbiAgICBkb3dubG9hZE9kaW5SZWxlYXNlLFxuICAgIGdldExhdGVzdFJlbGVhc2UsXG4gICAgcGFyc2VWZXJzaW9uXG59IGZyb20gJy4vb2Rpbi1yZXBvJztcbmltcG9ydCB7Y3JlYXRlT2N0b2tpdH0gZnJvbSAnLi91dGlscyc7XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgb2N0b2tpdCA9IGNyZWF0ZU9jdG9raXQoKTtcbiAgICBjb25zdCB2ZXJzaW9uID0gY29yZS5nZXRJbnB1dCgnb2Rpbi12ZXJzaW9uJywge3JlcXVpcmVkOiB0cnVlfSk7XG4gICAgbGV0IGRlc3RpbmF0aW9uUGF0aCA9IGNvcmUuZ2V0SW5wdXQoJ2Rlc3RpbmF0aW9uJywge3JlcXVpcmVkOiBmYWxzZX0pO1xuICAgIGNvbnN0IGFkZFRvUGF0aCA9IGNvcmUuZ2V0Qm9vbGVhbklucHV0KCdhZGQtdG8tcGF0aCcsIHtyZXF1aXJlZDogZmFsc2V9KTtcbiAgICBpZiAoIWRlc3RpbmF0aW9uUGF0aCkge1xuICAgICAgICBkZXN0aW5hdGlvblBhdGggPSBwYXRoLnJlc29sdmUoXG4gICAgICAgICAgICBwcm9jZXNzLmVudlsnR0lUSFVCX1dPUktTUEFDRSddISxcbiAgICAgICAgICAgICcuLy5vZGluJ1xuICAgICAgICApO1xuICAgIH1cbiAgICBsZXQgb2RpblZlcnNpb246IE9kaW5WZXJzaW9uO1xuICAgIGlmICh2ZXJzaW9uICE9PSAnbGF0ZXN0Jykge1xuICAgICAgICBvZGluVmVyc2lvbiA9IHBhcnNlVmVyc2lvbih2ZXJzaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvZGluVmVyc2lvbiA9IGF3YWl0IGdldExhdGVzdFJlbGVhc2Uob2N0b2tpdCk7XG4gICAgfVxuICAgIGNvbnN0IGFyY2hpdmVQYXRoID0gYXdhaXQgZG93bmxvYWRPZGluUmVsZWFzZShcbiAgICAgICAgb2RpblZlcnNpb24sXG4gICAgICAgIGRlc3RpbmF0aW9uUGF0aCxcbiAgICAgICAgb2N0b2tpdFxuICAgICk7XG4gICAgY29uc3QgYXJjaGl2ZUZpbGUgPSBhd2FpdCBmcy5vcGVuKGFyY2hpdmVQYXRoLCBmcy5jb25zdGFudHMuT19SRE9OTFkpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJzID0gYXJjaGl2ZUZpbGUuY3JlYXRlUmVhZFN0cmVhbSgpO1xuICAgICAgICBhd2FpdCBjb21wcmVzc2luZy56aXAudW5jb21wcmVzcyhycywgZGVzdGluYXRpb25QYXRoKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBhd2FpdCBhcmNoaXZlRmlsZS5jbG9zZSgpO1xuICAgIH1cbiAgICBjb3JlLnNldE91dHB1dCgnb2Rpbi12ZXJzaW9uJywgb2RpblZlcnNpb24uam9pbignLScpKTtcbiAgICBjb3JlLnNldE91dHB1dCgnb2Rpbi1wYXRoJywgZGVzdGluYXRpb25QYXRoKTtcbiAgICBjb3JlLnNldE91dHB1dChcbiAgICAgICAgJ29kaW4tYmluYXJ5LXBhdGgnLFxuICAgICAgICBwYXRoLnJlc29sdmUoXG4gICAgICAgICAgICBkZXN0aW5hdGlvblBhdGgsXG4gICAgICAgICAgICBgLi9vZGluJHtwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInID8gJy5leGUnIDogJyd9YFxuICAgICAgICApXG4gICAgKTtcbiAgICBpZiAoYWRkVG9QYXRoKSB7XG4gICAgICAgIGNvcmUuYWRkUGF0aChkZXN0aW5hdGlvblBhdGgpO1xuICAgIH1cbiAgICBjb3JlLnNhdmVTdGF0ZSgnb2Rpbi1wYXRoJywgZGVzdGluYXRpb25QYXRoKTtcbn1cblxubWFpbigpLmNhdGNoKChlcnI6IEVycm9yKSA9PiB7XG4gICAgY29yZS5zZXRGYWlsZWQoZXJyLm1lc3NhZ2UpO1xufSk7XG4iXX0=