"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listRepositoryReleaseAssets = exports.getRepositoryReleaseByTag = exports.getRepositoryReleaseAsset = exports.getRepositoryRelease = exports.getRepositoryLatestRelease = exports.downloadRepositoryReleaseAsset = exports.createOctokit = exports.getTestingModule = void 0;
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
const core_1 = __importDefault(require("@actions/core"));
const github_1 = __importDefault(require("@actions/github"));
const m = {
    createOctokit() {
        const authToken = core_1.default.getInput('auth-token', { required: true });
        if (!authToken) {
            throw new Error('Failed to create Octokit instance (no authentication token provided)');
        }
        return github_1.default.getOctokit(authToken);
    },
    async getRepositoryLatestRelease(params, octokit) {
        const { data } = await octokit.rest.repos.getLatestRelease({
            ...params
        });
        return data;
    },
    async getRepositoryReleaseByTag(params, octokit) {
        const { data } = await octokit.rest.repos.getReleaseByTag({
            ...params
        });
        return data;
    },
    async getRepositoryRelease(params, octokit) {
        const { data } = await octokit.rest.repos.getRelease({
            ...params
        });
        return data;
    },
    async listRepositoryReleaseAssets(params, octokit) {
        const { data } = await octokit.rest.repos.listReleaseAssets({
            ...params
        });
        return data;
    },
    async getRepositoryReleaseAsset(params, octokit) {
        const { data } = await octokit.rest.repos.getReleaseAsset({
            ...params
        });
        return data;
    },
    async downloadRepositoryReleaseAsset(params, destinationFolder, octokit) {
        await promises_1.default.mkdir(destinationFolder, {
            recursive: true
        });
        const asset = await m.getRepositoryReleaseAsset(params, octokit);
        const destination = node_path_1.default.resolve(destinationFolder.toString('utf-8'), asset.name);
        const { data } = await octokit.rest.repos.getReleaseAsset({
            ...params,
            headers: {
                accept: 'application/octet-stream'
            }
        });
        await promises_1.default.writeFile(destination, Buffer.from(data), 'binary');
        return destination;
    }
};
function getTestingModule() {
    return m;
}
exports.getTestingModule = getTestingModule;
exports.createOctokit = m.createOctokit, exports.downloadRepositoryReleaseAsset = m.downloadRepositoryReleaseAsset, exports.getRepositoryLatestRelease = m.getRepositoryLatestRelease, exports.getRepositoryRelease = m.getRepositoryRelease, exports.getRepositoryReleaseAsset = m.getRepositoryReleaseAsset, exports.getRepositoryReleaseByTag = m.getRepositoryReleaseByTag, exports.listRepositoryReleaseAssets = m.listRepositoryReleaseAssets;
//# sourceMappingURL=data:application/json;base64,